package elems

import "fmt"

// ALL ELEMENTS IN SPRINTF FORMAT
//      import re
//
//      FUNCTION_REGEX = r"func (.+)\(.*\{\n.*\n.*\n\}"
//
//      def get_function_names(file) -> list:
//          with open(file, "r") as f:
//              data = f.read()
//              return re.findall(FUNCTION_REGEX, data)
//
//      func_names = get_function_names("./elems/all_elems.go")
//      newfile = open("./elems/all_elems_format.go", "w")
//      for name in func_names:
//          newfile.write(f"""
//          func {name}F(innerText string, args ...any) *Element {{
//              if innerText == "" {{
//                  return {name}()
//              }}
//              text := fmt.Sprintf(innerText, args...)
//              return {name}(text)
//          }}""")
//      for name in func_names:
//          newfile.write(f"""
//          func (e *Element){name}F(innerText string, args ...any) *Element {{
//              if innerText == "" {{
//                  return e.{name}()
//              }}
//              text := fmt.Sprintf(innerText, args...)
//              return e.{name}(text)
//          }}""")

// A Element in Sprintf format: (Autogenerated)
func AF(innerText string, args ...any) *Element {
	if innerText == "" {
		return A()
	}
	text := fmt.Sprintf(innerText, args...)
	return A(text)
}

// Abbr Element in Sprintf format: (Autogenerated)
func AbbrF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Abbr()
	}
	text := fmt.Sprintf(innerText, args...)
	return Abbr(text)
}

// Address Element in Sprintf format: (Autogenerated)
func AddressF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Address()
	}
	text := fmt.Sprintf(innerText, args...)
	return Address(text)
}

// Area Element in Sprintf format: (Autogenerated)
func AreaF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Area()
	}
	text := fmt.Sprintf(innerText, args...)
	return Area(text)
}

// Article Element in Sprintf format: (Autogenerated)
func ArticleF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Article()
	}
	text := fmt.Sprintf(innerText, args...)
	return Article(text)
}

// Aside Element in Sprintf format: (Autogenerated)
func AsideF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Aside()
	}
	text := fmt.Sprintf(innerText, args...)
	return Aside(text)
}

// Audio Element in Sprintf format: (Autogenerated)
func AudioF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Audio()
	}
	text := fmt.Sprintf(innerText, args...)
	return Audio(text)
}

// B Element in Sprintf format: (Autogenerated)
func BF(innerText string, args ...any) *Element {
	if innerText == "" {
		return B()
	}
	text := fmt.Sprintf(innerText, args...)
	return B(text)
}

// Bdi Element in Sprintf format: (Autogenerated)
func BdiF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Bdi()
	}
	text := fmt.Sprintf(innerText, args...)
	return Bdi(text)
}

// Bdo Element in Sprintf format: (Autogenerated)
func BdoF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Bdo()
	}
	text := fmt.Sprintf(innerText, args...)
	return Bdo(text)
}

// Blockquote Element in Sprintf format: (Autogenerated)
func BlockquoteF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Blockquote()
	}
	text := fmt.Sprintf(innerText, args...)
	return Blockquote(text)
}

// Body Element in Sprintf format: (Autogenerated)
func BodyF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Body()
	}
	text := fmt.Sprintf(innerText, args...)
	return Body(text)
}

// Button Element in Sprintf format: (Autogenerated)
func ButtonF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Button()
	}
	text := fmt.Sprintf(innerText, args...)
	return Button(text)
}

// Canvas Element in Sprintf format: (Autogenerated)
func CanvasF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Canvas()
	}
	text := fmt.Sprintf(innerText, args...)
	return Canvas(text)
}

// Caption Element in Sprintf format: (Autogenerated)
func CaptionF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Caption()
	}
	text := fmt.Sprintf(innerText, args...)
	return Caption(text)
}

// Cite Element in Sprintf format: (Autogenerated)
func CiteF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Cite()
	}
	text := fmt.Sprintf(innerText, args...)
	return Cite(text)
}

// Code Element in Sprintf format: (Autogenerated)
func CodeF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Code()
	}
	text := fmt.Sprintf(innerText, args...)
	return Code(text)
}

// Col Element in Sprintf format: (Autogenerated)
func ColF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Col()
	}
	text := fmt.Sprintf(innerText, args...)
	return Col(text)
}

// Colgroup Element in Sprintf format: (Autogenerated)
func ColgroupF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Colgroup()
	}
	text := fmt.Sprintf(innerText, args...)
	return Colgroup(text)
}

// Command Element in Sprintf format: (Autogenerated)
func CommandF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Command()
	}
	text := fmt.Sprintf(innerText, args...)
	return Command(text)
}

// Datalist Element in Sprintf format: (Autogenerated)
func DatalistF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Datalist()
	}
	text := fmt.Sprintf(innerText, args...)
	return Datalist(text)
}

// Dd Element in Sprintf format: (Autogenerated)
func DdF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Dd()
	}
	text := fmt.Sprintf(innerText, args...)
	return Dd(text)
}

// Del Element in Sprintf format: (Autogenerated)
func DelF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Del()
	}
	text := fmt.Sprintf(innerText, args...)
	return Del(text)
}

// Details Element in Sprintf format: (Autogenerated)
func DetailsF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Details()
	}
	text := fmt.Sprintf(innerText, args...)
	return Details(text)
}

// Dfn Element in Sprintf format: (Autogenerated)
func DfnF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Dfn()
	}
	text := fmt.Sprintf(innerText, args...)
	return Dfn(text)
}

// Div Element in Sprintf format: (Autogenerated)
func DivF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Div()
	}
	text := fmt.Sprintf(innerText, args...)
	return Div(text)
}

// Dl Element in Sprintf format: (Autogenerated)
func DlF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Dl()
	}
	text := fmt.Sprintf(innerText, args...)
	return Dl(text)
}

// Dt Element in Sprintf format: (Autogenerated)
func DtF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Dt()
	}
	text := fmt.Sprintf(innerText, args...)
	return Dt(text)
}

// Em Element in Sprintf format: (Autogenerated)
func EmF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Em()
	}
	text := fmt.Sprintf(innerText, args...)
	return Em(text)
}

// Embed Element in Sprintf format: (Autogenerated)
func EmbedF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Embed()
	}
	text := fmt.Sprintf(innerText, args...)
	return Embed(text)
}

// Fieldset Element in Sprintf format: (Autogenerated)
func FieldsetF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Fieldset()
	}
	text := fmt.Sprintf(innerText, args...)
	return Fieldset(text)
}

// Figcaption Element in Sprintf format: (Autogenerated)
func FigcaptionF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Figcaption()
	}
	text := fmt.Sprintf(innerText, args...)
	return Figcaption(text)
}

// Figure Element in Sprintf format: (Autogenerated)
func FigureF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Figure()
	}
	text := fmt.Sprintf(innerText, args...)
	return Figure(text)
}

// Footer Element in Sprintf format: (Autogenerated)
func FooterF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Footer()
	}
	text := fmt.Sprintf(innerText, args...)
	return Footer(text)
}

// Form Element in Sprintf format: (Autogenerated)
func FormF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Form()
	}
	text := fmt.Sprintf(innerText, args...)
	return Form(text)
}

// H1 Element in Sprintf format: (Autogenerated)
func H1F(innerText string, args ...any) *Element {
	if innerText == "" {
		return H1()
	}
	text := fmt.Sprintf(innerText, args...)
	return H1(text)
}

// H2 Element in Sprintf format: (Autogenerated)
func H2F(innerText string, args ...any) *Element {
	if innerText == "" {
		return H2()
	}
	text := fmt.Sprintf(innerText, args...)
	return H2(text)
}

// H3 Element in Sprintf format: (Autogenerated)
func H3F(innerText string, args ...any) *Element {
	if innerText == "" {
		return H3()
	}
	text := fmt.Sprintf(innerText, args...)
	return H3(text)
}

// H4 Element in Sprintf format: (Autogenerated)
func H4F(innerText string, args ...any) *Element {
	if innerText == "" {
		return H4()
	}
	text := fmt.Sprintf(innerText, args...)
	return H4(text)
}

// H5 Element in Sprintf format: (Autogenerated)
func H5F(innerText string, args ...any) *Element {
	if innerText == "" {
		return H5()
	}
	text := fmt.Sprintf(innerText, args...)
	return H5(text)
}

// H6 Element in Sprintf format: (Autogenerated)
func H6F(innerText string, args ...any) *Element {
	if innerText == "" {
		return H6()
	}
	text := fmt.Sprintf(innerText, args...)
	return H6(text)
}

// Header Element in Sprintf format: (Autogenerated)
func HeaderF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Header()
	}
	text := fmt.Sprintf(innerText, args...)
	return Header(text)
}

// I Element in Sprintf format: (Autogenerated)
func IF(innerText string, args ...any) *Element {
	if innerText == "" {
		return I()
	}
	text := fmt.Sprintf(innerText, args...)
	return I(text)
}

// Iframe Element in Sprintf format: (Autogenerated)
func IframeF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Iframe()
	}
	text := fmt.Sprintf(innerText, args...)
	return Iframe(text)
}

// Ins Element in Sprintf format: (Autogenerated)
func InsF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Ins()
	}
	text := fmt.Sprintf(innerText, args...)
	return Ins(text)
}

// Kbd Element in Sprintf format: (Autogenerated)
func KbdF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Kbd()
	}
	text := fmt.Sprintf(innerText, args...)
	return Kbd(text)
}

// Keygen Element in Sprintf format: (Autogenerated)
func KeygenF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Keygen()
	}
	text := fmt.Sprintf(innerText, args...)
	return Keygen(text)
}

// Label Element in Sprintf format: (Autogenerated)
func LabelF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Label()
	}
	text := fmt.Sprintf(innerText, args...)
	return Label(text)
}

// Legend Element in Sprintf format: (Autogenerated)
func LegendF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Legend()
	}
	text := fmt.Sprintf(innerText, args...)
	return Legend(text)
}

// Li Element in Sprintf format: (Autogenerated)
func LiF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Li()
	}
	text := fmt.Sprintf(innerText, args...)
	return Li(text)
}

// Main Element in Sprintf format: (Autogenerated)
func MainF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Main()
	}
	text := fmt.Sprintf(innerText, args...)
	return Main(text)
}

// Map Element in Sprintf format: (Autogenerated)
func MapF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Map()
	}
	text := fmt.Sprintf(innerText, args...)
	return Map(text)
}

// Mark Element in Sprintf format: (Autogenerated)
func MarkF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Mark()
	}
	text := fmt.Sprintf(innerText, args...)
	return Mark(text)
}

// Menu Element in Sprintf format: (Autogenerated)
func MenuF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Menu()
	}
	text := fmt.Sprintf(innerText, args...)
	return Menu(text)
}

// Meter Element in Sprintf format: (Autogenerated)
func MeterF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Meter()
	}
	text := fmt.Sprintf(innerText, args...)
	return Meter(text)
}

// Nav Element in Sprintf format: (Autogenerated)
func NavF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Nav()
	}
	text := fmt.Sprintf(innerText, args...)
	return Nav(text)
}

// Object Element in Sprintf format: (Autogenerated)
func ObjectF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Object()
	}
	text := fmt.Sprintf(innerText, args...)
	return Object(text)
}

// Ol Element in Sprintf format: (Autogenerated)
func OlF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Ol()
	}
	text := fmt.Sprintf(innerText, args...)
	return Ol(text)
}

// Optgroup Element in Sprintf format: (Autogenerated)
func OptgroupF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Optgroup()
	}
	text := fmt.Sprintf(innerText, args...)
	return Optgroup(text)
}

// Option Element in Sprintf format: (Autogenerated)
func OptionF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Option()
	}
	text := fmt.Sprintf(innerText, args...)
	return Option(text)
}

// Output Element in Sprintf format: (Autogenerated)
func OutputF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Output()
	}
	text := fmt.Sprintf(innerText, args...)
	return Output(text)
}

// P Element in Sprintf format: (Autogenerated)
func PF(innerText string, args ...any) *Element {
	if innerText == "" {
		return P()
	}
	text := fmt.Sprintf(innerText, args...)
	return P(text)
}

// Param Element in Sprintf format: (Autogenerated)
func ParamF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Param()
	}
	text := fmt.Sprintf(innerText, args...)
	return Param(text)
}

// Pre Element in Sprintf format: (Autogenerated)
func PreF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Pre()
	}
	text := fmt.Sprintf(innerText, args...)
	return Pre(text)
}

// Progress Element in Sprintf format: (Autogenerated)
func ProgressF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Progress()
	}
	text := fmt.Sprintf(innerText, args...)
	return Progress(text)
}

// Q Element in Sprintf format: (Autogenerated)
func QF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Q()
	}
	text := fmt.Sprintf(innerText, args...)
	return Q(text)
}

// Rp Element in Sprintf format: (Autogenerated)
func RpF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Rp()
	}
	text := fmt.Sprintf(innerText, args...)
	return Rp(text)
}

// Rt Element in Sprintf format: (Autogenerated)
func RtF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Rt()
	}
	text := fmt.Sprintf(innerText, args...)
	return Rt(text)
}

// Ruby Element in Sprintf format: (Autogenerated)
func RubyF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Ruby()
	}
	text := fmt.Sprintf(innerText, args...)
	return Ruby(text)
}

// S Element in Sprintf format: (Autogenerated)
func SF(innerText string, args ...any) *Element {
	if innerText == "" {
		return S()
	}
	text := fmt.Sprintf(innerText, args...)
	return S(text)
}

// Samp Element in Sprintf format: (Autogenerated)
func SampF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Samp()
	}
	text := fmt.Sprintf(innerText, args...)
	return Samp(text)
}

// Section Element in Sprintf format: (Autogenerated)
func SectionF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Section()
	}
	text := fmt.Sprintf(innerText, args...)
	return Section(text)
}

// Small Element in Sprintf format: (Autogenerated)
func SmallF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Small()
	}
	text := fmt.Sprintf(innerText, args...)
	return Small(text)
}

// Source Element in Sprintf format: (Autogenerated)
func SourceF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Source()
	}
	text := fmt.Sprintf(innerText, args...)
	return Source(text)
}

// Span Element in Sprintf format: (Autogenerated)
func SpanF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Span()
	}
	text := fmt.Sprintf(innerText, args...)
	return Span(text)
}

// Strong Element in Sprintf format: (Autogenerated)
func StrongF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Strong()
	}
	text := fmt.Sprintf(innerText, args...)
	return Strong(text)
}

// Sub Element in Sprintf format: (Autogenerated)
func SubF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Sub()
	}
	text := fmt.Sprintf(innerText, args...)
	return Sub(text)
}

// Summary Element in Sprintf format: (Autogenerated)
func SummaryF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Summary()
	}
	text := fmt.Sprintf(innerText, args...)
	return Summary(text)
}

// Sup Element in Sprintf format: (Autogenerated)
func SupF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Sup()
	}
	text := fmt.Sprintf(innerText, args...)
	return Sup(text)
}

// Table Element in Sprintf format: (Autogenerated)
func TableF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Table()
	}
	text := fmt.Sprintf(innerText, args...)
	return Table(text)
}

// Tbody Element in Sprintf format: (Autogenerated)
func TbodyF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Tbody()
	}
	text := fmt.Sprintf(innerText, args...)
	return Tbody(text)
}

// Td Element in Sprintf format: (Autogenerated)
func TdF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Td()
	}
	text := fmt.Sprintf(innerText, args...)
	return Td(text)
}

// Textarea Element in Sprintf format: (Autogenerated)
func TextareaF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Textarea()
	}
	text := fmt.Sprintf(innerText, args...)
	return Textarea(text)
}

// Tfoot Element in Sprintf format: (Autogenerated)
func TfootF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Tfoot()
	}
	text := fmt.Sprintf(innerText, args...)
	return Tfoot(text)
}

// Th Element in Sprintf format: (Autogenerated)
func ThF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Th()
	}
	text := fmt.Sprintf(innerText, args...)
	return Th(text)
}

// Thead Element in Sprintf format: (Autogenerated)
func TheadF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Thead()
	}
	text := fmt.Sprintf(innerText, args...)
	return Thead(text)
}

// Time Element in Sprintf format: (Autogenerated)
func TimeF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Time()
	}
	text := fmt.Sprintf(innerText, args...)
	return Time(text)
}

// Tr Element in Sprintf format: (Autogenerated)
func TrF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Tr()
	}
	text := fmt.Sprintf(innerText, args...)
	return Tr(text)
}

// Track Element in Sprintf format: (Autogenerated)
func TrackF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Track()
	}
	text := fmt.Sprintf(innerText, args...)
	return Track(text)
}

// U Element in Sprintf format: (Autogenerated)
func UF(innerText string, args ...any) *Element {
	if innerText == "" {
		return U()
	}
	text := fmt.Sprintf(innerText, args...)
	return U(text)
}

// Ul Element in Sprintf format: (Autogenerated)
func UlF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Ul()
	}
	text := fmt.Sprintf(innerText, args...)
	return Ul(text)
}

// Var Element in Sprintf format: (Autogenerated)
func VarF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Var()
	}
	text := fmt.Sprintf(innerText, args...)
	return Var(text)
}

// Video Element in Sprintf format: (Autogenerated)
func VideoF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Video()
	}
	text := fmt.Sprintf(innerText, args...)
	return Video(text)
}

// Wbr Element in Sprintf format: (Autogenerated)
func WbrF(innerText string, args ...any) *Element {
	if innerText == "" {
		return Wbr()
	}
	text := fmt.Sprintf(innerText, args...)
	return Wbr(text)
}

// A Element in Sprintf format: (Autogenerated)
func (e *Element) AF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.A()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.A(text)
}

// Abbr Element in Sprintf format: (Autogenerated)
func (e *Element) AbbrF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Abbr()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Abbr(text)
}

// Address Element in Sprintf format: (Autogenerated)
func (e *Element) AddressF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Address()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Address(text)
}

// Area Element in Sprintf format: (Autogenerated)
func (e *Element) AreaF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Area()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Area(text)
}

// Article Element in Sprintf format: (Autogenerated)
func (e *Element) ArticleF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Article()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Article(text)
}

// Aside Element in Sprintf format: (Autogenerated)
func (e *Element) AsideF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Aside()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Aside(text)
}

// Audio Element in Sprintf format: (Autogenerated)
func (e *Element) AudioF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Audio()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Audio(text)
}

// B Element in Sprintf format: (Autogenerated)
func (e *Element) BF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.B()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.B(text)
}

// Bdi Element in Sprintf format: (Autogenerated)
func (e *Element) BdiF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Bdi()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Bdi(text)
}

// Bdo Element in Sprintf format: (Autogenerated)
func (e *Element) BdoF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Bdo()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Bdo(text)
}

// Blockquote Element in Sprintf format: (Autogenerated)
func (e *Element) BlockquoteF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Blockquote()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Blockquote(text)
}

// Body Element in Sprintf format: (Autogenerated)
func (e *Element) BodyF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Body()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Body(text)
}

// Button Element in Sprintf format: (Autogenerated)
func (e *Element) ButtonF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Button()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Button(text)
}

// Canvas Element in Sprintf format: (Autogenerated)
func (e *Element) CanvasF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Canvas()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Canvas(text)
}

// Caption Element in Sprintf format: (Autogenerated)
func (e *Element) CaptionF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Caption()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Caption(text)
}

// Cite Element in Sprintf format: (Autogenerated)
func (e *Element) CiteF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Cite()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Cite(text)
}

// Code Element in Sprintf format: (Autogenerated)
func (e *Element) CodeF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Code()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Code(text)
}

// Col Element in Sprintf format: (Autogenerated)
func (e *Element) ColF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Col()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Col(text)
}

// Colgroup Element in Sprintf format: (Autogenerated)
func (e *Element) ColgroupF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Colgroup()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Colgroup(text)
}

// Command Element in Sprintf format: (Autogenerated)
func (e *Element) CommandF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Command()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Command(text)
}

// Datalist Element in Sprintf format: (Autogenerated)
func (e *Element) DatalistF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Datalist()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Datalist(text)
}

// Dd Element in Sprintf format: (Autogenerated)
func (e *Element) DdF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Dd()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Dd(text)
}

// Del Element in Sprintf format: (Autogenerated)
func (e *Element) DelF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Del()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Del(text)
}

// Details Element in Sprintf format: (Autogenerated)
func (e *Element) DetailsF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Details()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Details(text)
}

// Dfn Element in Sprintf format: (Autogenerated)
func (e *Element) DfnF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Dfn()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Dfn(text)
}

// Div Element in Sprintf format: (Autogenerated)
func (e *Element) DivF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Div()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Div(text)
}

// Dl Element in Sprintf format: (Autogenerated)
func (e *Element) DlF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Dl()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Dl(text)
}

// Dt Element in Sprintf format: (Autogenerated)
func (e *Element) DtF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Dt()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Dt(text)
}

// Em Element in Sprintf format: (Autogenerated)
func (e *Element) EmF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Em()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Em(text)
}

// Embed Element in Sprintf format: (Autogenerated)
func (e *Element) EmbedF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Embed()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Embed(text)
}

// Fieldset Element in Sprintf format: (Autogenerated)
func (e *Element) FieldsetF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Fieldset()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Fieldset(text)
}

// Figcaption Element in Sprintf format: (Autogenerated)
func (e *Element) FigcaptionF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Figcaption()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Figcaption(text)
}

// Figure Element in Sprintf format: (Autogenerated)
func (e *Element) FigureF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Figure()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Figure(text)
}

// Footer Element in Sprintf format: (Autogenerated)
func (e *Element) FooterF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Footer()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Footer(text)
}

// Form Element in Sprintf format: (Autogenerated)
func (e *Element) FormF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Form()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Form(text)
}

// H1 Element in Sprintf format: (Autogenerated)
func (e *Element) H1F(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.H1()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.H1(text)
}

// H2 Element in Sprintf format: (Autogenerated)
func (e *Element) H2F(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.H2()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.H2(text)
}

// H3 Element in Sprintf format: (Autogenerated)
func (e *Element) H3F(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.H3()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.H3(text)
}

// H4 Element in Sprintf format: (Autogenerated)
func (e *Element) H4F(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.H4()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.H4(text)
}

// H5 Element in Sprintf format: (Autogenerated)
func (e *Element) H5F(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.H5()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.H5(text)
}

// H6 Element in Sprintf format: (Autogenerated)
func (e *Element) H6F(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.H6()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.H6(text)
}

// Header Element in Sprintf format: (Autogenerated)
func (e *Element) HeaderF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Header()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Header(text)
}

// I Element in Sprintf format: (Autogenerated)
func (e *Element) IF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.I()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.I(text)
}

// Iframe Element in Sprintf format: (Autogenerated)
func (e *Element) IframeF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Iframe()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Iframe(text)
}

// Ins Element in Sprintf format: (Autogenerated)
func (e *Element) InsF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Ins()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Ins(text)
}

// Kbd Element in Sprintf format: (Autogenerated)
func (e *Element) KbdF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Kbd()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Kbd(text)
}

// Keygen Element in Sprintf format: (Autogenerated)
func (e *Element) KeygenF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Keygen()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Keygen(text)
}

// Label Element in Sprintf format: (Autogenerated)
func (e *Element) LabelF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Label()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Label(text)
}

// Legend Element in Sprintf format: (Autogenerated)
func (e *Element) LegendF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Legend()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Legend(text)
}

// Li Element in Sprintf format: (Autogenerated)
func (e *Element) LiF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Li()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Li(text)
}

// Main Element in Sprintf format: (Autogenerated)
func (e *Element) MainF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Main()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Main(text)
}

// Map Element in Sprintf format: (Autogenerated)
func (e *Element) MapF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Map()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Map(text)
}

// Mark Element in Sprintf format: (Autogenerated)
func (e *Element) MarkF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Mark()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Mark(text)
}

// Menu Element in Sprintf format: (Autogenerated)
func (e *Element) MenuF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Menu()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Menu(text)
}

// Meter Element in Sprintf format: (Autogenerated)
func (e *Element) MeterF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Meter()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Meter(text)
}

// Nav Element in Sprintf format: (Autogenerated)
func (e *Element) NavF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Nav()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Nav(text)
}

// Object Element in Sprintf format: (Autogenerated)
func (e *Element) ObjectF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Object()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Object(text)
}

// Ol Element in Sprintf format: (Autogenerated)
func (e *Element) OlF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Ol()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Ol(text)
}

// Optgroup Element in Sprintf format: (Autogenerated)
func (e *Element) OptgroupF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Optgroup()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Optgroup(text)
}

// Option Element in Sprintf format: (Autogenerated)
func (e *Element) OptionF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Option()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Option(text)
}

// Output Element in Sprintf format: (Autogenerated)
func (e *Element) OutputF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Output()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Output(text)
}

// P Element in Sprintf format: (Autogenerated)
func (e *Element) PF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.P()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.P(text)
}

// Param Element in Sprintf format: (Autogenerated)
func (e *Element) ParamF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Param()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Param(text)
}

// Pre Element in Sprintf format: (Autogenerated)
func (e *Element) PreF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Pre()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Pre(text)
}

// Progress Element in Sprintf format: (Autogenerated)
func (e *Element) ProgressF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Progress()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Progress(text)
}

// Q Element in Sprintf format: (Autogenerated)
func (e *Element) QF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Q()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Q(text)
}

// Rp Element in Sprintf format: (Autogenerated)
func (e *Element) RpF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Rp()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Rp(text)
}

// Rt Element in Sprintf format: (Autogenerated)
func (e *Element) RtF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Rt()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Rt(text)
}

// Ruby Element in Sprintf format: (Autogenerated)
func (e *Element) RubyF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Ruby()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Ruby(text)
}

// S Element in Sprintf format: (Autogenerated)
func (e *Element) SF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.S()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.S(text)
}

// Samp Element in Sprintf format: (Autogenerated)
func (e *Element) SampF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Samp()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Samp(text)
}

// Section Element in Sprintf format: (Autogenerated)
func (e *Element) SectionF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Section()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Section(text)
}

// Small Element in Sprintf format: (Autogenerated)
func (e *Element) SmallF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Small()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Small(text)
}

// Source Element in Sprintf format: (Autogenerated)
func (e *Element) SourceF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Source()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Source(text)
}

// Span Element in Sprintf format: (Autogenerated)
func (e *Element) SpanF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Span()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Span(text)
}

// Strong Element in Sprintf format: (Autogenerated)
func (e *Element) StrongF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Strong()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Strong(text)
}

// Sub Element in Sprintf format: (Autogenerated)
func (e *Element) SubF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Sub()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Sub(text)
}

// Summary Element in Sprintf format: (Autogenerated)
func (e *Element) SummaryF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Summary()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Summary(text)
}

// Sup Element in Sprintf format: (Autogenerated)
func (e *Element) SupF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Sup()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Sup(text)
}

// Table Element in Sprintf format: (Autogenerated)
func (e *Element) TableF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Table()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Table(text)
}

// Tbody Element in Sprintf format: (Autogenerated)
func (e *Element) TbodyF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Tbody()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Tbody(text)
}

// Td Element in Sprintf format: (Autogenerated)
func (e *Element) TdF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Td()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Td(text)
}

// Textarea Element in Sprintf format: (Autogenerated)
func (e *Element) TextareaF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Textarea()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Textarea(text)
}

// Tfoot Element in Sprintf format: (Autogenerated)
func (e *Element) TfootF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Tfoot()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Tfoot(text)
}

// Th Element in Sprintf format: (Autogenerated)
func (e *Element) ThF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Th()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Th(text)
}

// Thead Element in Sprintf format: (Autogenerated)
func (e *Element) TheadF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Thead()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Thead(text)
}

// Time Element in Sprintf format: (Autogenerated)
func (e *Element) TimeF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Time()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Time(text)
}

// Tr Element in Sprintf format: (Autogenerated)
func (e *Element) TrF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Tr()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Tr(text)
}

// Track Element in Sprintf format: (Autogenerated)
func (e *Element) TrackF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Track()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Track(text)
}

// U Element in Sprintf format: (Autogenerated)
func (e *Element) UF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.U()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.U(text)
}

// Ul Element in Sprintf format: (Autogenerated)
func (e *Element) UlF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Ul()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Ul(text)
}

// Var Element in Sprintf format: (Autogenerated)
func (e *Element) VarF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Var()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Var(text)
}

// Video Element in Sprintf format: (Autogenerated)
func (e *Element) VideoF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Video()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Video(text)
}

// Wbr Element in Sprintf format: (Autogenerated)
func (e *Element) WbrF(innerText string, args ...any) *Element {
	if innerText == "" {
		return e.Wbr()
	}
	text := fmt.Sprintf(innerText, args...)
	return e.Wbr(text)
}
